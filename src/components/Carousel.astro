---
export interface Props {
  arrows?: string;
  classes?: string;
}

const { classes, arrows } = Astro.props;
---

<div class={`carousel-wrap max-w-screen-4xl mx-auto relative ${classes}`}>

  <div class={`carousel-arrows--${arrows} flex`}>
    <button class="carousel-arrow carousel-arrow-left flex w-6 transition duration-300 opacity-30" aria-label="Arrow left">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M17 239L0 256l17 17L153 409l17 17L203.9 392l-17-17-95-95L488 280l24 0 0-48-24 0L91.9 232l95-95 17-17L169.9 86.1l-17 17L17 239z"/></svg>
    </button>
    
    <button class="carousel-arrow carousel-arrow-right flex w-6 transition duration-300 ml-6" aria-label="Arrow right">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M495 273l17-17-17-17L359 103l-17-17L308.1 120l17 17 95 95L24 232 0 232l0 48 24 0 396.1 0-95 95-17 17 33.9 33.9 17-17L495 273z"/></svg>
    </button>
  </div>

  <div class="carousel-container carousel-container--draggable flex overflow-x-auto hide-scrollbars snap-mandatory snap-x transition duration-500">

    <slot />

  </div>

</div>

<style is:global>
  .carousel-container > * {
    @apply snap-start flex flex-none;
  }

  .carousel-arrows--outside {
    @apply absolute 2xl:static -bottom-8 md:-bottom-10 left-1/2 -translate-x-1/2 2xl:transform-none 2xl:w-full;
  }

  .carousel-arrows--outside .carousel-arrow-left {
    @apply 2xl:absolute 2xl:top-1/2 2xl:left-4;
  }

  .carousel-arrows--outside .carousel-arrow-right {
    @apply 2xl:absolute 2xl:top-1/2 2xl:right-4;
  }

  .carousel-arrows--under {
    @apply absolute -bottom-8 md:-bottom-10 left-1/2 -translate-x-1/2;
  }

  .carousel-arrows--under-right {
    @apply absolute -bottom-8 right-0 pr-8;
  }
</style>

<script>

var carouselWraps = document.querySelectorAll(".carousel-wrap") as any as Array<HTMLElement>;

if(carouselWraps) {

  carouselWraps.forEach((carousel) => {

    var carouselArrows = carousel.querySelectorAll(".carousel-arrow") as any as Array<HTMLElement>;

    var carouselContainer = carousel.querySelector('.carousel-container') as HTMLElement | null;
    var carouselItem = carousel.querySelectorAll('.carousel-container > *') as any as Array<HTMLElement>;
    var x: number;

    carouselArrows.forEach(arrow => {
      arrow.addEventListener("click", function() {
        carousel.querySelector('.carousel-arrow-left').classList.remove('opacity-30');
  
        if (arrow.classList.contains('carousel-arrow-right')) {
          x = (carouselItem[0].offsetWidth) + carouselContainer.scrollLeft;
          carouselContainer.scrollTo({
            left: x,
            behavior: "smooth",
          });
        } else {
          x = (carouselItem[0].offsetWidth) - carouselContainer.scrollLeft;
          carouselContainer.scrollTo({
            left: -x,
            behavior: "smooth",
          });
        }

        arrowStates();

      })
      
      carouselContainer.addEventListener('scroll', arrowStates)

      function arrowStates() {
        setTimeout(function() {

          if(parseInt(carouselContainer.scrollLeft) >= parseInt((carouselContainer.scrollWidth - (carouselContainer.clientWidth+10)))) {
            carousel.querySelector('.carousel-arrow-right').classList.add('opacity-30');
          } else {
            carousel.querySelector('.carousel-arrow-right').classList.remove('opacity-30');
          }

          if(carouselContainer.scrollLeft < carouselItem[0].offsetWidth/2) {
            carousel.querySelector('.carousel-arrow-left').classList.add('opacity-30');
          } else {
            carousel.querySelector('.carousel-arrow-left').classList.remove('opacity-30');
          }
        }, 400);
      }

    })
    
  });

}


// Drag to scroll functionality
const carousels = document.querySelectorAll(".carousel-container--draggable") as any as Array<HTMLElement>;

if (carousels) {

  carousels.forEach((carousel) => {
    const preventClick = (e: MouseEvent) => {
      e.preventDefault();
      e.stopImmediatePropagation();
    }
    let isDown = false;
    let isDragged = false;
    let startX: number;
    let scrollLeft: number;

    carousel.addEventListener("mousedown", (e: MouseEvent) => {
      isDown = true;
      carousel.classList.remove("snap-x");
      startX = e.pageX - carousel.offsetLeft;
      scrollLeft = carousel.scrollLeft;
    });
    carousel.addEventListener("mouseleave", () => {
      isDown = false;
      carousel.classList.add("snap-x");
    });
    carousel.addEventListener("mouseup", () => {
      isDown = false;
      const elements = carousel.querySelectorAll("a");
      if(isDragged){
          for(let i = 0; i<elements.length; i++){
                elements[i].addEventListener("click", preventClick);
          }
      }
      else{
          for(let i = 0; i<elements.length; i++){
                elements[i].removeEventListener("click", preventClick);
          }
      }
      carousel.classList.add("snap-x");
      isDragged =  false;
    });
    carousel.addEventListener("mousemove", (e: MouseEvent) => {
      if (!isDown) return;
      isDragged =  true;
      e.preventDefault();
      const x = e.pageX - carousel.offsetLeft;
      const walk = (x - startX);
      carousel.scrollLeft = scrollLeft - walk;
    });
  })

}

</script>